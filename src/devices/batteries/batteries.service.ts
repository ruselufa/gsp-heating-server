import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { MqttService } from '../../mqtt/mqtt.service';
import { DatabaseService } from '../../database/database.service';
import { batteriesConfigs } from './batteries.config';
import { BatteriesState, BatteriesGroup } from '../interfaces/batteries.interface';

interface BatteriesInternalState extends BatteriesState {
	autoControlEnabled: boolean;
	lastTemperatureUpdate: number;
	valveOperationTimers: Record<string, NodeJS.Timeout>; // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–ª–∞–ø–∞–Ω–∞–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
}

@Injectable()
export class BatteriesService implements OnModuleInit {
	private readonly logger = new Logger(BatteriesService.name);
	private states: Record<string, BatteriesInternalState> = {};
	private controlIntervals: Record<string, NodeJS.Timeout> = {};
	private isDestroyed = false;

	constructor(
		private readonly mqttService: MqttService,
		private readonly eventEmitter: EventEmitter2,
		private readonly databaseService: DatabaseService,
	) {
		this.isDestroyed = false;
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–∞—Ç–∞—Ä–µ–π
		Object.keys(batteriesConfigs).forEach((deviceId) => {
			const config = batteriesConfigs[deviceId];
			this.states[deviceId] = {
				valveStates: {},
				currentTemperature: 0,
				setpointTemperature: 20,
				isEmergencyStop: false,
				isWorking: false,
				isOnline: false,
				autoControlEnabled: false,
				lastTemperatureUpdate: Date.now(),
				valveOperationTimers: {},
				lastValveOperation: {},
			};

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–ø–∞–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
			config.groups.forEach(group => {
				this.states[deviceId].valveStates[group.groupName] = 'closed';
			});
		});
	}

	async onModuleInit() {
		this.logger.log('Batteries Service initialized');
		
		// –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		await this.loadSettingsFromDatabase();

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—Ä–æ–∫–µ—Ä–∞ sensors
		this.eventEmitter.on('mqtt.sensors.message', (data: { topic: string; message: any }) => {
			this.logger.log(`üîã –ü–æ–ª—É—á–µ–Ω–æ MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ: ${data.topic}, ${data.message}`);

			// –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–∞—Ç–∞—Ä–µ–π, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ø–∏–∫
			for (const [deviceId, config] of Object.entries(batteriesConfigs)) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
				for (const [address, sensorPath] of Object.entries(config.topics.TEMPERATURE_SENSORS)) {
					if (data.topic === sensorPath) {
						const temperature = parseFloat(String(data.message));
						if (!isNaN(temperature)) {
							this.updateTemperature(deviceId, temperature);
						} else {
							this.logger.warn(`‚ùå Invalid temperature data for ${deviceId} sensor ${address}: ${data.message}`);
						}
						return; // –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∞—Ç—á–∏–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
					}
				}
			}
		});

		// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä–∞–º
		this.eventEmitter.on('mqtt.sensors.connected', () => {
			this.logger.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±—Ä–æ–∫–µ—Ä—É –¥–∞—Ç—á–∏–∫–æ–≤');
			this.setupMqttSubscriptions();
		});

		this.eventEmitter.on('mqtt.heating.connected', () => {
			this.logger.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±—Ä–æ–∫–µ—Ä—É –æ—Ç–æ–ø–ª–µ–Ω–∏—è');
		});

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–∞—Ç–∞—Ä–µ–π
		Object.entries(batteriesConfigs).forEach(([deviceId, config]) => {
			this.logger.log(`Initializing batteries device: ${deviceId}`);

			// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
			this.controlIntervals[deviceId] = setInterval(() => {
				if (this.states[deviceId]?.autoControlEnabled && !this.states[deviceId]?.isEmergencyStop) {
					this.runHysteresisControl(deviceId);
				}
			}, 1000);

			// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
			this.eventEmitter.on(`mqtt.sensors.connected`, () => {
				this.states[deviceId].isOnline = true;
				this.eventEmitter.emit('batteries.update', deviceId);
			});
			this.eventEmitter.on(`mqtt.sensors.error`, () => {
				this.states[deviceId].isOnline = false;
				this.eventEmitter.emit('batteries.update', deviceId);
			});
			this.eventEmitter.on(`mqtt.sensors.offline`, () => {
				this.states[deviceId].isOnline = false;
				this.eventEmitter.emit('batteries.update', deviceId);
			});
		});

		// –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
		await this.setupMqttSubscriptions();
	}

	private async setupMqttSubscriptions() {
		this.logger.log('üîß Setting up MQTT subscriptions for batteries...');
		
		await Promise.all(
			Object.entries(batteriesConfigs).map(async ([deviceId, config]) => {
				try {
					// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –¥–∞—Ç—á–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
					Object.entries(config.topics.TEMPERATURE_SENSORS).forEach(([address, sensorPath]) => {
						this.logger.log(`üå°Ô∏è Subscribing ${deviceId} to temperature sensor address ${address}: ${sensorPath}`);
						this.mqttService.subscribe('sensors', sensorPath);
					});
				} catch (err: unknown) {
					const error = err as Error;
					this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫–∏ –±–∞—Ç–∞—Ä–µ–π ${deviceId}: ${error.message}`);
				}
			}),
		);
	}

	private updateTemperature(deviceId: string, temperature: number) {
		if (this.states[deviceId]) {
			this.states[deviceId].currentTemperature = temperature;
			this.states[deviceId].isOnline = true;
			this.states[deviceId].lastTemperatureUpdate = Date.now();
			this.logger.log(`üìä Batteries ${deviceId} temperature updated: ${temperature}¬∞C`);
			
			// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
			this.eventEmitter.emit('batteries.temperature.updated', {
				deviceId,
				temperature,
			});
		}
	}

	private runHysteresisControl(deviceId: string) {
		const state = this.states[deviceId];
		const config = batteriesConfigs[deviceId];
		
		if (!state || !config) return;

		const { currentTemperature, setpointTemperature } = state;
		const { HYSTERESIS } = config.temperatureSettings;

		// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
		const temperatureDiff = setpointTemperature - currentTemperature;
		
		this.logger.debug(`Hysteresis Control ${deviceId}: current=${currentTemperature.toFixed(2)}¬∞C, setpoint=${setpointTemperature}¬∞C, diff=${temperatureDiff.toFixed(2)}¬∞C`);

		// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞–º–∏ –ø–æ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
		config.groups.forEach(group => {
			const currentValveState = state.valveStates[group.groupName];
			let shouldOpen = false;

			// –õ–æ–≥–∏–∫–∞ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞
			if (temperatureDiff > HYSTERESIS) {
				// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ —É—Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É –±–æ–ª—å—à–µ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–ø–∞–Ω
				shouldOpen = true;
			} else if (temperatureDiff < -HYSTERESIS) {
				// –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ —É—Å—Ç–∞–≤–∫–∏ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É –±–æ–ª—å—à–µ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–ø–∞–Ω
				shouldOpen = false;
			} else {
				// –í –∑–æ–Ω–µ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				shouldOpen = currentValveState === 'open';
			}

			// –£–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–ø–∞–Ω–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
			if ((shouldOpen && currentValveState !== 'open') || (!shouldOpen && currentValveState !== 'closed')) {
				this.setGroupValve(deviceId, group.groupName, shouldOpen);
			}
		});

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
		const hasOpenValves = Object.values(state.valveStates).some(valveState => valveState === 'open');
		state.isWorking = hasOpenValves;

		this.logger.debug(`Hysteresis Control ${deviceId}: isWorking=${state.isWorking}, valveStates=`, state.valveStates);
	}

	private setGroupValve(deviceId: string, groupName: string, open: boolean) {
		const state = this.states[deviceId];
		const config = batteriesConfigs[deviceId];
		
		if (!state || !config) return;

		const group = config.groups.find(g => g.groupName === groupName);
		if (!group) return;

		const newState = open ? 'open' : 'closed';
		
		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
		if (state.valveStates[groupName] === newState) return;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å–µ —Ä–µ–ª–µ –≥—Ä—É–ø–ø—ã
		group.relays.forEach(relay => {
			const relayModulePath = config.topics.RELAY_MODULES[group.relayModuleAddress];
			if (!relayModulePath) {
				this.logger.error(`üîã VALVE: Relay module path not found for address ${group.relayModuleAddress}`);
				return;
			}
			
			const topic = `${relayModulePath}/${relay}`;
			const relayValue = open ? 0 : 1; // 0 - –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω, 1 - –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω
			
			this.logger.log(`üîã VALVE: Sending valve command for ${deviceId} group ${groupName}: topic="${topic}/on", value=${relayValue}`);
			this.mqttService.publish(config.broker, `${topic}/on`, relayValue, {
				retain: false,
			});
		});

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.valveStates[groupName] = newState;
		if (!state.lastValveOperation) {
			state.lastValveOperation = {};
		}
		state.lastValveOperation[groupName] = new Date();

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∞–ø–∞–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
		if (open) {
			// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
			if (state.valveOperationTimers[groupName]) {
				clearTimeout(state.valveOperationTimers[groupName]);
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
			state.valveOperationTimers[groupName] = setTimeout(() => {
				this.logger.log(`üîã AUTO-CLOSE: Auto-closing valve for ${deviceId} group ${groupName} after ${config.temperatureSettings.VALVE_OPERATION_TIME}s`);
				this.setGroupValve(deviceId, groupName, false);
			}, config.temperatureSettings.VALVE_OPERATION_TIME * 1000);
		} else {
			// –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–ø–∞–Ω–∞
			if (state.valveOperationTimers[groupName]) {
				clearTimeout(state.valveOperationTimers[groupName]);
				delete state.valveOperationTimers[groupName];
			}
		}

		this.logger.debug(`Valve ${deviceId} group ${groupName} set to: ${newState}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–ø–∞–Ω–∞
		this.eventEmitter.emit('batteries.valve.state.changed', {
			deviceId,
			groupName,
			state: newState,
		});
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	private async loadSettingsFromDatabase() {
		this.logger.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç–∞—Ä–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
		
		for (const deviceId of Object.keys(this.states)) {
			try {
				const setpointStr = await this.databaseService.getHeatingSetting(deviceId, 'setpoint_temperature');
				if (setpointStr) {
					const setpoint = parseFloat(setpointStr);
					if (!isNaN(setpoint)) {
						this.states[deviceId].setpointTemperature = setpoint;
						this.logger.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å—Ç–∞–≤–∫–∞ –¥–ª—è ${deviceId}: ${setpoint}¬∞C`);
					}
				}
			} catch (error) {
				this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è ${deviceId}:`, error);
			}
		}
	}

	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

	async setTemperature(deviceId: string, temperature: number) {
		const state = this.states[deviceId];
		
		if (!state) return;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
		if (temperature < 5 || temperature > 35) {
			this.logger.warn(`Invalid temperature setpoint for batteries ${deviceId}: ${temperature}¬∞C`);
			return;
		}

		state.setpointTemperature = temperature;

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç–∞–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		try {
			await this.databaseService.setHeatingSetting(deviceId, 'setpoint_temperature', temperature.toString());
			this.logger.log(`Batteries ${deviceId} setpoint temperature set to: ${temperature}¬∞C and saved to database`);
		} catch (error) {
			this.logger.error(`Failed to save temperature setpoint to database for ${deviceId}:`, error);
		}
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
		this.eventEmitter.emit('batteries.setpoint.changed', {
			deviceId,
			temperature,
		});
	}

	enableAutoControl(deviceId: string) {
		const state = this.states[deviceId];
		if (!state) return;

		state.autoControlEnabled = true;
		state.isEmergencyStop = false;

		this.logger.log(`Auto control enabled for batteries ${deviceId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		this.eventEmitter.emit('batteries.auto.control.enabled', {
			deviceId,
		});
	}

	disableAutoControl(deviceId: string) {
		const state = this.states[deviceId];
		const config = batteriesConfigs[deviceId];
		
		if (!state || !config) return;

		state.autoControlEnabled = false;
		state.isWorking = false;
		
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞–ø–∞–Ω—ã
		config.groups.forEach(group => {
			this.setGroupValve(deviceId, group.groupName, false);
		});

		this.logger.log(`Auto control disabled for batteries ${deviceId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		this.eventEmitter.emit('batteries.auto.control.disabled', {
			deviceId,
		});
	}

	emergencyStop(deviceId: string) {
		const state = this.states[deviceId];
		const config = batteriesConfigs[deviceId];
		
		if (!state || !config) return;

		state.isEmergencyStop = true;
		state.autoControlEnabled = false;
		state.isWorking = false;
		
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞–ø–∞–Ω—ã
		config.groups.forEach(group => {
			this.setGroupValve(deviceId, group.groupName, false);
		});

		this.logger.warn(`Emergency stop activated for batteries ${deviceId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		this.eventEmitter.emit('batteries.emergency.stop', {
			deviceId,
		});
	}

	resetEmergencyStop(deviceId: string) {
		const state = this.states[deviceId];
		if (!state) return;

		state.isEmergencyStop = false;
		this.logger.log(`Emergency stop reset for batteries ${deviceId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		this.eventEmitter.emit('batteries.emergency.stop.reset', {
			deviceId,
		});
	}

	// –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–æ–º –≥—Ä—É–ø–ø—ã
	setGroupValveManually(deviceId: string, groupName: string, open: boolean) {
		const state = this.states[deviceId];
		if (!state) return;

		// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
		// (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏)
		this.setGroupValve(deviceId, groupName, open);
		
		this.logger.log(`Manual valve control for ${deviceId} group ${groupName}: ${open ? 'OPEN' : 'CLOSED'}`);
	}

	// –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

	getState(deviceId: string): BatteriesState | null {
		const state = this.states[deviceId];
		if (!state) return null;

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–ª–µ–π
		return {
			valveStates: { ...state.valveStates },
			currentTemperature: state.currentTemperature,
			setpointTemperature: state.setpointTemperature,
			isEmergencyStop: state.isEmergencyStop,
			isWorking: state.isWorking,
			isOnline: state.isOnline,
			autoControlEnabled: state.autoControlEnabled,
			lastError: state.lastError,
			lastValveOperation: { ...state.lastValveOperation },
		};
	}

	getAllStates(): Record<string, BatteriesState> {
		const result: Record<string, BatteriesState> = {};
		Object.keys(this.states).forEach(key => {
			const state = this.getState(key);
			if (state) {
				result[key] = state;
			}
		});
		return result;
	}

	getConfig(deviceId: string) {
		return batteriesConfigs[deviceId] || null;
	}

	getAllConfigs() {
		return batteriesConfigs;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
	getSystemStats() {
		const stats = {
			totalDevices: Object.keys(this.states).length,
			onlineDevices: 0,
			workingDevices: 0,
			emergencyStopDevices: 0,
			autoControlEnabledDevices: 0,
			averageTemperature: 0,
			averageSetpoint: 0,
			totalGroups: 0,
			openValves: 0,
		};

		let tempSum = 0;
		let setpointSum = 0;

		Object.entries(this.states).forEach(([deviceId, state]) => {
			if (state.isOnline) stats.onlineDevices++;
			if (state.isWorking) stats.workingDevices++;
			if (state.isEmergencyStop) stats.emergencyStopDevices++;
			if (state.autoControlEnabled) stats.autoControlEnabledDevices++;
			
			tempSum += state.currentTemperature;
			setpointSum += state.setpointTemperature;

			const config = batteriesConfigs[deviceId];
			if (config) {
				stats.totalGroups += config.groups.length;
				Object.values(state.valveStates).forEach(valveState => {
					if (valveState === 'open') stats.openValves++;
				});
			}
		});

		if (stats.totalDevices > 0) {
			stats.averageTemperature = tempSum / stats.totalDevices;
			stats.averageSetpoint = setpointSum / stats.totalDevices;
		}

		return stats;
	}

	// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
	onModuleDestroy() {
		this.isDestroyed = true;
		Object.values(this.controlIntervals).forEach(interval => {
			clearInterval(interval);
		});
		
		// –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –∫–ª–∞–ø–∞–Ω–æ–≤
		Object.values(this.states).forEach(state => {
			Object.values(state.valveOperationTimers).forEach(timer => {
				clearTimeout(timer);
			});
		});
		
		this.logger.log('Batteries service destroyed');
	}

	// –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ MQTT –∫–æ–º–∞–Ω–¥
	testMqttCommand(deviceId: string, groupName: string, relay: string, value: number) {
		const config = batteriesConfigs[deviceId];
		if (!config) return;

		const group = config.groups.find(g => g.groupName === groupName);
		if (!group) {
			this.logger.error(`üß™ TEST: Group ${groupName} not found for device ${deviceId}`);
			return;
		}

		const relayModulePath = config.topics.RELAY_MODULES[group.relayModuleAddress];
		if (!relayModulePath) {
			this.logger.error(`üß™ TEST: Relay module path not found for address ${group.relayModuleAddress}`);
			return;
		}

		const topic = `${relayModulePath}/${relay}`;
		this.logger.log(`üß™ TEST: Sending MQTT command to ${deviceId} group ${groupName}: topic: ${topic}/on, value: ${value}`);
		this.mqttService.publish(config.broker, `${topic}/on`, value, {
			retain: false,
		});
	}
}
