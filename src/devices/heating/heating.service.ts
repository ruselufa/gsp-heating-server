import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { MqttService } from '../../mqtt/mqtt.service';
import { heatingConfigs } from './heating.config';
import { HeatingState, HeatingPIDSettings } from '../interfaces/heating.interface';

interface HeatingInternalState extends HeatingState {
	autoControlEnabled: boolean;
	pidState: HeatingPIDSettings;
	lastPIDUpdate: number;
}

@Injectable()
export class HeatingService implements OnModuleInit {
	private readonly logger = new Logger(HeatingService.name);
	private states: Record<string, HeatingInternalState> = {};
	private pidControlIntervals: Record<string, NodeJS.Timeout> = {};
	private isDestroyed = false;

	constructor(
		private readonly mqttService: MqttService,
		private readonly eventEmitter: EventEmitter2,
	) {
		this.isDestroyed = false;
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞
		Object.keys(heatingConfigs).forEach((heatingId) => {
			const config = heatingConfigs[heatingId];
			this.states[heatingId] = {
				currentFanSpeed: 0,
				valveState: 'closed',
				currentTemperature: 0,
				setpointTemperature: 15, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
				pidOutput: 0,
				isEmergencyStop: false,
				isWorking: false,
				isOnline: false,
				autoControlEnabled: false,
				pidState: { ...config.pidSettings }, // –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PID
				lastPIDUpdate: Date.now(),
			};
		});
	}

	async onModuleInit() {
		this.logger.log('Heating Service initialized');

		// –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ MQTT —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—Ä–æ–∫–µ—Ä–∞ sensors
		this.eventEmitter.on('mqtt.sensors.message', (data: { topic: string; message: any }) => {
			// –õ–æ–≥ –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			this.logger.log(`üî• –ü–æ–ª—É—á–µ–Ω–æ MQTT —Å–æ–æ–±—â–µ–Ω–∏–µ: ${data.topic}, ${data.message}`);

			// –ò—â–µ–º –æ—Ç–æ–ø–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ø–∏–∫
			for (const [heatingId, config] of Object.entries(heatingConfigs)) {
				if (data.topic === config.topics.TEMPERATURE_SENSOR) {
					const temperature = parseFloat(String(data.message));
					if (!isNaN(temperature)) {
						this.updateTemperature(heatingId, temperature);
					} else {
						this.logger.warn(`‚ùå Invalid temperature data for ${heatingId}: ${data.message}`);
					}
					break;
				}
			}
		});

		// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä–∞–º
		this.eventEmitter.on('mqtt.sensors.connected', () => {
			this.logger.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±—Ä–æ–∫–µ—Ä—É –¥–∞—Ç—á–∏–∫–æ–≤');
			this.setupMqttSubscriptions();
		});

		this.eventEmitter.on('mqtt.heating.connected', () => {
			this.logger.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±—Ä–æ–∫–µ—Ä—É –æ—Ç–æ–ø–ª–µ–Ω–∏—è');
		});

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞
		Object.entries(heatingConfigs).forEach(([heatingId, config]) => {
			this.logger.log(`Initializing heating system: ${heatingId}`);

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
			this.states[heatingId] = {
				currentFanSpeed: 0,
				valveState: 'closed',
				currentTemperature: 0,
				setpointTemperature: 20,
				pidOutput: 0,
				isEmergencyStop: false,
				isWorking: false,
				isOnline: false,
				autoControlEnabled: false,
				lastError: 0,
				integral: config.pidSettings.integral,
				pidState: { ...config.pidSettings },
				lastPIDUpdate: Date.now(),
			};

			// –ó–∞–ø—É—Å–∫–∞–µ–º PID –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∫–æ–¥–∞)
			this.pidControlIntervals[heatingId] = setInterval(() => {
				if (this.states[heatingId]?.autoControlEnabled && !this.states[heatingId]?.isEmergencyStop) {
					this.runPIDControl(heatingId);
				}
			}, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ

			// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
			this.eventEmitter.on(`mqtt.sensors.connected`, () => {
				this.states[heatingId].isOnline = true;
				this.eventEmitter.emit('heating.update', heatingId);
			});
			this.eventEmitter.on(`mqtt.sensors.error`, () => {
				this.states[heatingId].isOnline = false;
				this.eventEmitter.emit('heating.update', heatingId);
			});
			this.eventEmitter.on(`mqtt.sensors.offline`, () => {
				this.states[heatingId].isOnline = false;
				this.eventEmitter.emit('heating.update', heatingId);
			});
		});

		// –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
		await this.setupMqttSubscriptions();

		// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∫–ª–∞–ø–∞–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –®–£–ö–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
		this.applySasonalValveLogicToAll();
	}

	private async setupMqttSubscriptions() {
		this.logger.log('üîß Setting up MQTT subscriptions...');
		
		await Promise.all(
			Object.entries(heatingConfigs).map(async ([heatingId, config]) => {
				try {
					this.logger.log(`üå°Ô∏è Subscribing ${heatingId} to temperature sensor: ${config.topics.TEMPERATURE_SENSOR}`);
					await this.mqttService.subscribe('sensors', config.topics.TEMPERATURE_SENSOR);
				} catch (err: unknown) {
					const error = err as Error;
					this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø–∏–∫–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏—è ${heatingId}: ${error.message}`);
				}
			}),
		);
	}

	private updateTemperature(heatingId: string, temperature: number) {
		if (this.states[heatingId]) {
			this.states[heatingId].currentTemperature = temperature;
			this.states[heatingId].isOnline = true;
			this.logger.log(`üìä Heating ${heatingId} temperature updated: ${temperature}¬∞C`);
			
			// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
			this.eventEmitter.emit('heating.temperature.updated', {
				heatingId,
				temperature,
			});
		}
	}

	private runPIDControl(heatingId: string) {
		const state = this.states[heatingId];
		const config = heatingConfigs[heatingId];
		
		if (!state || !config) return;

		const { currentTemperature, setpointTemperature, pidState } = state;
		const { Kp, Ki, Kd, outputMin, outputMax } = pidState;

		// –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É
		const error = setpointTemperature - currentTemperature;

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
		pidState.integral += error;

		// –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é
		const derivative = error - pidState.prevError;

		// –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ö–æ–¥ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
		let output = Kp * error + Ki * pidState.integral + Kd * derivative;

		// –î–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è: –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ —É—Å—Ç–∞–≤–∫–∏, –≤—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0
		if (error < 0) {
			output = 0;
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
			pidState.integral = 0;
		} else {
			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ outputMin - outputMax —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
			output = Math.max(outputMin, Math.min(outputMax, output));
		}

		this.logger.debug(`PID Control ${heatingId}: error=${error.toFixed(2)}, output=${output.toFixed(2)}, valve=${this.getSeasonalValveState(heatingId, output) ? 'open' : 'closed'} (seasonal)`);

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		state.pidOutput = output;
		state.currentFanSpeed = output;
		pidState.prevError = error;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Ö–æ–¥ –±–æ–ª—å—à–µ 15%
		if (output >= 15) {
			this.logger.log(`üî• PID: Sending fan speed command for ${heatingId}: topic="${config.topics.FAN_DIMMER}/on", value=${output}`);
			this.mqttService.publish(config.broker, `${config.topics.FAN_DIMMER}/on`, output, {
				retain: false,
			});
		} else {
			// –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –º–µ–Ω—å—à–µ 15%, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 0
			this.logger.log(`üî• PID: Fan speed below threshold (${output}%), sending 0 for ${heatingId}`);
			this.mqttService.publish(config.broker, `${config.topics.FAN_DIMMER}/on`, 0, {
				retain: false,
			});
		}

		// –£–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–ø–∞–Ω–æ–º –ø–æ —Å–µ–∑–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
		const valveState = this.getSeasonalValveState(heatingId, output);
		this.setSeasonalValve(heatingId, valveState);

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
		state.isWorking = output > 0;

		this.logger.debug(`PID Control ${heatingId}: error=${error.toFixed(2)}, output=${output.toFixed(2)}, valve=${state.valveState}`);

		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
		this.eventEmitter.emit('heating.pid.updated', {
			heatingId,
			error,
			output,
			integral: pidState.integral,
			derivative,
		});
	}

	private setValve(heatingId: string, open: boolean) {
		const state = this.states[heatingId];
		const config = heatingConfigs[heatingId];
		
		if (!state || !config) return;

		const newState = open ? 'open' : 'closed';
		
		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
		if (state.valveState === newState) return;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–µ–ª–µ
		this.logger.log(`üî• VALVE: Sending valve command for ${heatingId}: topic="${config.topics.VALVE_RELAY}/on", value=${open}`);
		this.mqttService.publish(config.broker, `${config.topics.VALVE_RELAY}/on`, open, {
			retain: false,
		});
		
		state.valveState = newState;

		this.logger.debug(`Valve ${heatingId} set to: ${newState}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–ø–∞–Ω–∞
		this.eventEmitter.emit('heating.valve.state.changed', {
			heatingId,
			state: newState,
		});
	}

	// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

	setFanSpeed(heatingId: string, speed: number) {
		const state = this.states[heatingId];
		const config = heatingConfigs[heatingId];
		
		if (!state || !config || speed < 0 || speed > 100) return;

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—Ö–æ–¥
		this.mqttService.publish(config.broker, `${config.topics.FAN_DIMMER}/on`, speed, {
			retain: false,
		});
		state.currentFanSpeed = speed;
		state.pidOutput = speed;

		this.logger.log(`Fan speed manually set to ${speed} for heating ${heatingId}`);
	}


	setTemperature(heatingId: string, temperature: number) {
		const state = this.states[heatingId];
		
		if (!state) return;

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
		if (temperature < 5 || temperature > 35) {
			this.logger.warn(`Invalid temperature setpoint for heating ${heatingId}: ${temperature}¬∞C`);
			return;
		}

		state.setpointTemperature = temperature;

		this.logger.log(`Heating ${heatingId} setpoint temperature set to: ${temperature}¬∞C`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
		this.eventEmitter.emit('heating.setpoint.changed', {
			heatingId,
			temperature,
		});
	}

	enableAutoControl(heatingId: string) {
		const state = this.states[heatingId];
		if (!state) return;

		state.autoControlEnabled = true;
		state.isEmergencyStop = false;
		
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º PID —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
		const config = heatingConfigs[heatingId];
		if (config) {
			state.pidState.integral = 0;
			state.pidState.prevError = 0;
		}

		this.logger.log(`Auto control enabled for heating ${heatingId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		this.eventEmitter.emit('heating.auto.control.enabled', {
			heatingId,
		});
	}

	disableAutoControl(heatingId: string) {
		const state = this.states[heatingId];
		const config = heatingConfigs[heatingId];
		
		if (!state || !config) return;

		state.autoControlEnabled = false;
		state.isWorking = false;
		
		// –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–ø–∞–Ω
					this.mqttService.publish(config.broker, `${config.topics.FAN_DIMMER}/on`, 0, {
						retain: false,
					});
		this.setValve(heatingId, false);
		
		state.currentFanSpeed = 0;
		state.pidOutput = 0;

		this.logger.log(`Auto control disabled for heating ${heatingId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		this.eventEmitter.emit('heating.auto.control.disabled', {
			heatingId,
		});
	}

	emergencyStop(heatingId: string) {
		const state = this.states[heatingId];
		const config = heatingConfigs[heatingId];
		
		if (!state || !config) return;

		state.isEmergencyStop = true;
		state.autoControlEnabled = false;
		state.isWorking = false;
		
		// –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–ø–∞–Ω
					this.mqttService.publish(config.broker, `${config.topics.FAN_DIMMER}/on`, 0, {
						retain: false,
					});
		this.setValve(heatingId, false);
		
		state.currentFanSpeed = 0;
		state.pidOutput = 0;

		this.logger.warn(`Emergency stop activated for heating ${heatingId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		this.eventEmitter.emit('heating.emergency.stop', {
			heatingId,
		});
	}

	resetEmergencyStop(heatingId: string) {
		const state = this.states[heatingId];
		if (!state) return;

		state.isEmergencyStop = false;
		this.logger.log(`Emergency stop reset for heating ${heatingId}`);
		
		// –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		this.eventEmitter.emit('heating.emergency.stop.reset', {
			heatingId,
		});
	}

	// –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	setPIDParameters(heatingId: string, Kp?: number, Ki?: number, Kd?: number) {
		const state = this.states[heatingId];
		if (!state) return;

		if (Kp !== undefined) state.pidState.Kp = Kp;
		if (Ki !== undefined) state.pidState.Ki = Ki;
		if (Kd !== undefined) state.pidState.Kd = Kd;

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
		state.pidState.integral = 0;
		state.pidState.prevError = 0;

		this.logger.log(`PID parameters updated for ${heatingId}: Kp=${state.pidState.Kp}, Ki=${state.pidState.Ki}, Kd=${state.pidState.Kd}`);
	}

	// –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

	getState(heatingId: string): HeatingState | null {
		const state = this.states[heatingId];
		if (!state) return null;

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ–ª–µ–π
		return {
			currentFanSpeed: state.currentFanSpeed,
			valveState: state.valveState,
			currentTemperature: state.currentTemperature,
			setpointTemperature: state.setpointTemperature,
			pidOutput: state.pidOutput,
			isEmergencyStop: state.isEmergencyStop,
			isWorking: state.isWorking,
			isOnline: state.isOnline,
			autoControlEnabled: state.autoControlEnabled,
			lastError: state.lastError,
			integral: state.integral,
		};
	}

	getAllStates(): Record<string, HeatingState> {
		const result: Record<string, HeatingState> = {};
		Object.keys(this.states).forEach(key => {
			const state = this.getState(key);
			if (state) {
				result[key] = state;
			}
		});
		return result;
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	getPIDParameters(heatingId: string) {
		const state = this.states[heatingId];
		if (!state) return null;

		return {
			Kp: state.pidState.Kp,
			Ki: state.pidState.Ki,
			Kd: state.pidState.Kd,
			integral: state.pidState.integral,
			prevError: state.pidState.prevError,
		};
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
	getSystemStats() {
		const stats = {
			totalSystems: Object.keys(this.states).length,
			onlineSystems: 0,
			workingSystems: 0,
			emergencyStopSystems: 0,
			autoControlEnabledSystems: 0,
			averageTemperature: 0,
			averageSetpoint: 0,
		};

		let tempSum = 0;
		let setpointSum = 0;

		Object.values(this.states).forEach(state => {
			if (state.isOnline) stats.onlineSystems++;
			if (state.isWorking) stats.workingSystems++;
			if (state.isEmergencyStop) stats.emergencyStopSystems++;
			if (state.autoControlEnabled) stats.autoControlEnabledSystems++;
			
			tempSum += state.currentTemperature;
			setpointSum += state.setpointTemperature;
		});

		if (stats.totalSystems > 0) {
			stats.averageTemperature = tempSum / stats.totalSystems;
			stats.averageSetpoint = setpointSum / stats.totalSystems;
		}

		return stats;
	}

	// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
	onModuleDestroy() {
		this.isDestroyed = true;
		Object.values(this.pidControlIntervals).forEach(interval => {
			clearInterval(interval);
		});
		this.logger.log('Heating service destroyed');
	}

	// –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ MQTT –∫–æ–º–∞–Ω–¥
	testMqttCommand(topic: string, value: string) {
		this.logger.log(`üß™ TEST: Sending MQTT command to topic: ${topic}, value: ${value}`);
		this.mqttService.publish('heating', topic, value, {
			retain: false,
		});
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞ –ø–æ —Å–µ–∑–æ–Ω—É
	private getSeasonalValveState(heatingId: string, pidOutput: number): boolean {
		const now = new Date();
		const month = now.getMonth() + 1; // getMonth() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0-11, –Ω—É–∂–Ω–æ 1-12
		const day = now.getDate();

		// –ó–∏–º–∞: —Å 1 –Ω–æ—è–±—Ä—è –¥–æ 31 –º–∞—Ä—Ç–∞ - –∫–ª–∞–ø–∞–Ω –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç
		if ((month === 11) || (month === 12) || (month === 1) || (month === 2) || (month === 3)) {
			this.logger.debug(`${heatingId}: Winter season - valve always open`);
			return true;
		}

		// –õ–µ—Ç–æ: —Å 1 –∏—é–Ω—è –ø–æ 31 –∞–≤–≥—É—Å—Ç–∞ - –∫–ª–∞–ø–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç
		if (month >= 6 && month <= 8) {
			this.logger.debug(`${heatingId}: Summer season - valve always closed`);
			return false;
		}

		// –û—Å–µ–Ω—å: —Å 1 —Å–µ–Ω—Ç—è–±—Ä—è –ø–æ 31 –æ–∫—Ç—è–±—Ä—è - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –®–£–ö
		// –í–µ—Å–Ω–∞: —Å 1 –∞–ø—Ä–µ–ª—è –ø–æ 31 –º–∞—è - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –®–£–ö
		if ((month >= 9 && month <= 10) || (month >= 4 && month <= 5)) {
			const shouldOpen = pidOutput > 0;
			this.logger.debug(`${heatingId}: Autumn/Spring season - valve synced with heating: ${shouldOpen}`);
			return shouldOpen;
		}

		// –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞)
		return false;
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞ –ø–æ —Å–µ–∑–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ
	private setSeasonalValve(heatingId: string, shouldOpen: boolean) {
		const state = this.states[heatingId];
		const config = heatingConfigs[heatingId];
		
		if (!state || !config) return;

		const newState = shouldOpen ? 'open' : 'closed';
		
		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
		if (state.valveState === newState) return;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–µ–ª–µ
		this.logger.log(`üî• SEASONAL VALVE: Sending valve command for ${heatingId}: topic="${config.topics.VALVE_RELAY}/on", value=${shouldOpen} (seasonal logic)`);
		this.mqttService.publish(config.broker, `${config.topics.VALVE_RELAY}/on`, shouldOpen, {
			retain: false,
		});
		
		state.valveState = newState;
		this.logger.debug(`Seasonal valve ${heatingId} set to: ${newState}`);
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∫–ª–∞–ø–∞–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –®–£–ö–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
	private applySasonalValveLogicToAll() {
		this.logger.log('üåç Applying seasonal valve logic to all heating units...');
		
		Object.keys(heatingConfigs).forEach(heatingId => {
			const state = this.states[heatingId];
			if (!state) return;

			// –ü–æ–ª—É—á–∞–µ–º —Å–µ–∑–æ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç PID –≤—ã—Ö–æ–¥–∞)
			const seasonalValveState = this.getSeasonalValveState(heatingId, 0);
			
			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–∞
			this.logger.log(`üåç Setting seasonal valve for ${heatingId}: ${seasonalValveState ? 'OPEN' : 'CLOSED'}`);
			
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–º–∏–Ω—É—è –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è)
			const config = heatingConfigs[heatingId];
			if (config) {
				this.mqttService.publish(config.broker, `${config.topics.VALVE_RELAY}/on`, seasonalValveState, {
					retain: false,
				});
				state.valveState = seasonalValveState ? 'open' : 'closed';
			}
		});

		this.logger.log('üåç Seasonal valve logic applied to all heating units');
	}
}