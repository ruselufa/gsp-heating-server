import {
	WebSocketGateway,
	WebSocketServer,
	OnGatewayInit,
	OnGatewayConnection,
	OnGatewayDisconnect,
	SubscribeMessage,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { Device } from '../devices/interfaces/device.interface';
import { Logger } from '@nestjs/common';
import { HeatingState } from '../devices/interfaces/heating.interface';
import { HeatingService } from '../devices/heating/heating.service';

interface HeatingCommand {
	heatingId: string;
	command: 'TURN_ON' | 'TURN_OFF' | 'SET_TEMPERATURE' | 'SET_PUMP_SPEED' | 'SET_VALVE' | 'EMERGENCY_STOP';
	value?: string | number;
}

@WebSocketGateway({
	cors: {
		origin: '*', // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω
	},
})
export class WebsocketGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
	@WebSocketServer()
	server: Server;

	private readonly logger = new Logger(WebsocketGateway.name);
	private connectedClients: Set<Socket> = new Set();

	constructor(
		private readonly eventEmitter: EventEmitter2,
		private readonly heatingService: HeatingService,
	) {
		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
		this.eventEmitter.on('device.updated', (device: Device) => this.handleDeviceUpdate(device));
		
		// –°–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è
		this.eventEmitter.on('heating.temperature.updated', (data: { heatingId: string; temperature: number }) => {
			this.handleHeatingTemperatureUpdate(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.setpoint.changed', (data: { heatingId: string; temperature: number }) => {
			this.handleHeatingSetpointUpdate(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.valve.state.changed', (data: { heatingId: string; action: string; state: string }) => {
			this.handleHeatingValveUpdate(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.emergency.stop', (data: { heatingId: string }) => {
			this.handleHeatingEmergencyStop(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.emergency.stop.reset', (data: { heatingId: string }) => {
			this.handleHeatingEmergencyStopReset(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.auto.control.enabled', (data: { heatingId: string }) => {
			this.handleHeatingAutoControlEnabled(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.auto.control.disabled', (data: { heatingId: string }) => {
			this.handleHeatingAutoControlDisabled(data);
			this.handleHeatingStateUpdate(data.heatingId);
		});
		this.eventEmitter.on('heating.pid.updated', (data: { heatingId: string; error: number; output: number }) =>
			this.handleHeatingPIDUpdate(data),
		);
	}

	afterInit() {
		this.logger.log('WebSocket Gateway –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
	}

	handleConnection(client: Socket) {
		this.logger.log(`Client connected: ${client.id}`);
		this.connectedClients.add(client);
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		client.emit('connected', {
			message: 'Connected to Heating System WebSocket',
			clientId: client.id,
			timestamp: new Date().toISOString(),
		});

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
		this.sendHeatingDataToClient(client);
	}

	handleDisconnect(client: Socket) {
		this.logger.log(`Client disconnected: ${client.id}`);
		this.connectedClients.delete(client);
	}

	private handleDeviceUpdate(device: Device) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
		this.server.emit('device:updated', device);
	}

	private handleHeatingTemperatureUpdate(data: { heatingId: string; temperature: number }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
		this.server.emit('heating:temperature:updated', {
			heatingId: data.heatingId,
			temperature: data.temperature,
			timestamp: new Date().toISOString(),
		});
	}

	private handleHeatingStateUpdate(heatingId: string) {
		try {
			const state = this.heatingService.getState(heatingId);
			if (state) {
				const heatingData = {
					heatingId,
					...state
				};
				
				this.logger.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è ${heatingId}`);
				this.server.emit('heating:updated', heatingData);
			}
		} catch (error) {
			this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error.message}`);
		}
	}

	private handleHeatingSetpointUpdate(data: { heatingId: string; temperature: number }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–≤–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
		this.server.emit('heating:setpoint:changed', {
			heatingId: data.heatingId,
			setpoint: data.temperature,
			timestamp: new Date().toISOString(),
		});
	}


	private handleHeatingValveUpdate(data: { heatingId: string; action: string; state: string }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–ø–∞–Ω–∞
		this.server.emit('heating:valve:state:changed', {
			heatingId: data.heatingId,
			action: data.action,
			state: data.state,
			timestamp: new Date().toISOString(),
		});
	}


	private handleHeatingEmergencyStop(data: { heatingId: string }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
		this.server.emit('heating:emergency:stop', {
			heatingId: data.heatingId,
			severity: 'critical',
			timestamp: new Date().toISOString(),
		});
	}

	private handleHeatingAutoControlEnabled(data: { heatingId: string }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		this.server.emit('heating:auto:control:enabled', {
			heatingId: data.heatingId,
			timestamp: new Date().toISOString(),
		});
	}

	private handleHeatingAutoControlDisabled(data: { heatingId: string }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		this.server.emit('heating:auto:control:disabled', {
			heatingId: data.heatingId,
			timestamp: new Date().toISOString(),
		});
	}

	private handleHeatingPIDUpdate(data: { heatingId: string; error: number; output: number }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PID —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞
		this.server.emit('heating:pid:updated', {
			heatingId: data.heatingId,
			error: data.error,
			output: data.output,
			timestamp: new Date().toISOString(),
		});
	}

	private handleHeatingEmergencyStopReset(data: { heatingId: string }) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		this.server.emit('heating:emergency:stop:reset', {
			heatingId: data.heatingId,
			timestamp: new Date().toISOString(),
		});
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
	private sendHeatingDataToClient(client: Socket) {
		try {
			const heatingStates = this.heatingService.getAllStates();
			const heatingArray = Object.entries(heatingStates).map(([heatingId, state]) => ({
				heatingId,
				...state
			}));
			
			this.logger.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.id}: ${heatingArray.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
			client.emit('heating', heatingArray);
		} catch (error) {
			this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–æ–ø–ª–µ–Ω–∏—è: ${error.message}`);
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
	sendToClient(clientId: string, event: string, data: unknown) {
		this.server.to(clientId).emit(event, data);
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
	broadcast(event: string, data: unknown) {
		this.server.emit(event, data);
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–æ–ø–ª–µ–Ω–∏—è
	@SubscribeMessage('getHeating')
	async handleGetHeating(client: Socket) {
		this.logger.log(`–ö–ª–∏–µ–Ω—Ç ${client.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è`);
		this.sendHeatingDataToClient(client);
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
	@SubscribeMessage('heating:command')
	async handleHeatingCommand(client: Socket, payload: HeatingCommand) {
		try {
			const { heatingId, command, value } = payload;
			this.logger.log(`üî• [MAIN] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è ${heatingId}: ${command} = ${value}`);

			switch (command) {
				case 'TURN_ON':
					this.heatingService.enableAutoControl(heatingId);
					break;
				case 'TURN_OFF':
					this.heatingService.disableAutoControl(heatingId);
					break;
				case 'SET_TEMPERATURE':
					if (value !== undefined) {
						this.heatingService.setTemperature(heatingId, Number(value));
					}
					break;
				case 'SET_PUMP_SPEED':
					if (value !== undefined) {
						this.heatingService.setFanSpeed(heatingId, Number(value));
					}
					break;
				case 'SET_VALVE':
					// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–ø–∞–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–∑–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
					this.logger.log(`–ö–æ–º–∞–Ω–¥–∞ SET_VALVE –¥–ª—è ${heatingId} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (—Å–µ–∑–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)`);
					break;
				case 'EMERGENCY_STOP':
					this.heatingService.emergencyStop(heatingId);
					break;
				default:
					this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
			client.emit('heating:command:success', {
				heatingId,
				command,
				value,
				timestamp: new Date().toISOString(),
			});
		} catch (error) {
			this.logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è: ${error.message}`);
			client.emit('heating:command:error', {
				heatingId: payload.heatingId,
				command: payload.command,
				error: error.message,
				timestamp: new Date().toISOString(),
			});
		}
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	getConnectionStats() {
		return {
			connectedClients: this.connectedClients.size,
			timestamp: new Date().toISOString(),
		};
	}
}
